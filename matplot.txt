
#! This is for matplotlib
 import matplotlib.pyplot as plt

1 To plot line chart
  cmd	plt.plot(x,y)
  cmd   plt.show()   [to make it visible]

2 To plot scatter plot [For correlation b/w 2 variables]
  cmd	plt.scatter(x,y)

  To add logarithmic scale add this
  cmd 	plt.xscale('log')
 
 IMPORTANT-
	TO DEFINE SIZE OF SCATTER IN GRAPH
          --     plt.scatter(data_x,data_y, s=data_x)      // s here is size and s=data_x we are defining the size of bubble
          --     plt.scatter(data_x,data_y, s=data_x,c=col)     // c here is color and c=col we are defining the color of bubble col - dictionary
          --     plt.scatter(data_x,data_y, s=data_x,c=col,alpha=0.8)     // alpha is opacity

3 Histogram [Great to see the idea of distribution]
  cmd  	help(plt.hist)   (for more help)
  
        [2 argument are important ->   x (value you want to make histogram), bins (how many bins data should be divided)   ]


   CMD 	plt.hist(x,bins=3)

4  plt.clf [cleans it up to start afresh previous graph is not removed]

5 Graph Customization
  cmd 	plt.xlabel("x-axis")
  cmd   plt.ylabel("y-axis")
  cmd   plt.title("title")

 IMPORTANT:
  - TO CHANGE THE LABEL FOR Y AXIS 
    cmd    plt.yticks([0,2,4,6,8] , ['0','2b','4c','6d','8e'] )       // You will see changes on Y-label of graph [xticks work the same]

6 To set particular name at specific values use plt.text() & for grid use plt.grid(True)
  cmd 	plt.text(x_value, y_value ,  "name")
  cmd   plt.grid(True)



------------
SEABORN
-------------
	import seaborn as sns
	sns.barplot(x,y)
	sns.set(color_codes=True)




-----------------------
	plt.savefig('img.jpg')			// This is used to save the files with diff extension




	df.plot(subplots=True)			// to print all column  plot in a single plot



df.plot(ax=axes[1], kind='hist', bins=30, normed=True, cumulative=True, range=(0,.3))	//cumalative is used to give cumulative distribution graph in 												increasing way and with the frequency


	^ ^
	| |



-----------------------
	MATPLOTLIB
	
	plt.plot(t,temperature ,'r')					# plot t vs temperature graph with color r

	plt.axes([0.05,1.00,1.15])					# axes() is used to made axes explicitly
NOTE -->	axes function consist of [x_lo , y-lower , width-figure , height-figure]



	plt.subplpot(2,1,1)						# subplot consist of 3 values
NOTE-> 		subplot(nrows , ncols , nsubplot )			#(m,n,k)
		plt.axes() to explicitly lay out the axes, you will use plt.subplot(m, n, k) ,
			to make the subplot grid of dimensions m by n and to make the kth subplot active.	
				#use k=1 on left ,k=2 right , k=3 bottom left and soo on .




7 To control upper and lower limit of axis 
	xlim([xmin , xmax])				#same as for ylim

  Can also be set using
	plt.axis(( x_min , xmaxx  , yMin , ymax ))

8 To save the image 
	plt.savefig()							# this will save the image
	

9 LEGEND Is used to show all labels on the figure
	plt.legend(loc='upper right') 					# this will show all labels on top upper right [loc specify where to put]


10 Annotate() is used to show same types of labels like 
	plt.annotate('label_name' , xy=(1 , 2 ) , arrowprops={'color':'red'})		#arrowprops is used to set arrow to the label
	plt.annotate('label_name' , xy=(1 , 2 ) , xytext=(val1,val2), arrowprops = dict(facecolor='black')    #for single and 1 color arrow


11 All thing for a graph is maintained by style sheet in matplotlib
	plt.style.use('ggplot')						#put names inside

	plt.style.available						# to get all style available 



12	        plt.set_cmp('grayscale')                                        # set color map to grayscale                                                  
        
optional ->  plt.pcolor(z)                              # this have some disadv as value differ from top to bottom and left to right(grayscale effect)
             plt.pcolor(z,cmp='gray)                    # set color map = gray [by default coloured value]
        
            plt.axis('tight')                           # to make white space remove near the figure
        
13        plt.meshgrid(x,y,z)                             # x and y are plotted on axes and z is plotted in fig
        
        plt.contour(z)                                  # use this when data varies continuosly [smooth curves]
                plt.contour(z,30)                               # to plot 30 curves
        plt.contourf(z)                                 # THIS MAKE filled coloured contour curves

14 	To have a scale near the figure
	plt.colorbar()

14 To plot rectangular bins graph
	
	plt.hist2d(x,y ,bins=(10,20))			# x & y are 1D arrays

15 For hexagonal bins
	plt.hexbin(x,y , gridsize(15,10))			

---------------------------------
16 TO WORK WITH IMAGES                                                                                                                           
         
        img = plt.imread('image_name.hpg')
         
        plt.imshow(img)
        plt.axis('off')                                         # to hide axes while showing images
         
         
   To convert color image to grey-scale image
         
        collapsed = img.mean(axis=2)                            #take mean along axis 2
         
	
